
import { useState, useEffect, useRef } from 'react';
import { useLocation } from 'react-router-dom';
import { listWhatsAppGroups } from '@/services/whatsAppGroupsService';

const TOUR_SESSION_KEY = 'onboarding_tour_shown';

export const useOnboardingTour = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [shouldShowTour, setShouldShowTour] = useState(false);
  const location = useLocation();
  const tourCheckedRef = useRef(false);
  const isCheckingRef = useRef(false);

  // Verificar se o tour deve ser exibido
  const checkTourConditions = async () => {
    // Evitar m√∫ltiplas verifica√ß√µes simult√¢neas
    if (isCheckingRef.current) {
      console.log('üîç [TOUR] Verifica√ß√£o j√° em andamento, pulando...');
      return;
    }

    isCheckingRef.current = true;

    try {
      console.log('üîç [TOUR] Iniciando verifica√ß√£o de condi√ß√µes do tour...');
      
      // S√≥ mostrar o tour na p√°gina inicial (dashboard)
      if (location.pathname !== '/') {
        console.log('‚ùå [TOUR] Tour s√≥ aparece no dashboard, p√°gina atual:', location.pathname);
        setShouldShowTour(false);
        isCheckingRef.current = false;
        return;
      }

      // Verificar se existe email no localStorage
      const userEmail = localStorage.getItem('userEmail');
      console.log('üìß [TOUR] Email do usu√°rio para verifica√ß√£o:', userEmail);
      
      if (!userEmail) {
        console.log('‚ùå [TOUR] Email n√£o encontrado no localStorage');
        setShouldShowTour(false);
        isCheckingRef.current = false;
        return;
      }

      // Verificar se j√° foi mostrado nesta sess√£o
      const shownThisSession = sessionStorage.getItem(TOUR_SESSION_KEY) === 'true';
      if (shownThisSession) {
        console.log('‚ùå [TOUR] Tour j√° foi exibido nesta sess√£o');
        setShouldShowTour(false);
        isCheckingRef.current = false;
        return;
      }

      // Verificar se h√° grupos cadastrados
      let hasGroups = false;
      
      try {
        console.log('üîç [TOUR] Buscando grupos para o usu√°rio...');
        const groups = await listWhatsAppGroups();
        hasGroups = groups.length > 0;
        console.log('üë• [TOUR] Grupos encontrados:', {
          quantidade: groups.length,
          grupos: groups.map(g => ({ id: g.id, nome: g.nome_grupo, status: g.status, login: g.login }))
        });
      } catch (error) {
        console.log('‚ö†Ô∏è [TOUR] Erro ao verificar grupos, assumindo que n√£o h√° grupos:', error);
        hasGroups = false;
      }

      // Se tem grupos, n√£o mostrar tour
      if (hasGroups) {
        console.log('‚úÖ [TOUR] Usu√°rio j√° tem grupos, n√£o mostrar tour');
        setShouldShowTour(false);
        isCheckingRef.current = false;
        return;
      }

      // Tour deve aparecer: usu√°rio sem grupos e tour n√£o foi exibido ainda
      console.log('üéØ [TOUR] CONDI√á√ïES ATENDIDAS - Usu√°rio sem grupos e tour n√£o exibido ainda');
      setShouldShowTour(true);
      
      // Abrir tour automaticamente ap√≥s um pequeno delay
      console.log('üöÄ [TOUR] Abrindo tour automaticamente - usu√°rio sem grupos');
      setTimeout(() => {
        if (!sessionStorage.getItem(TOUR_SESSION_KEY)) {
          console.log('üé¨ [TOUR] Executando abertura do tour...');
          setIsOpen(true);
          setCurrentStep(0);
          sessionStorage.setItem(TOUR_SESSION_KEY, 'true');
        }
      }, 2000);

    } catch (error) {
      console.error('‚ùå [TOUR] Erro ao verificar condi√ß√µes do tour:', error);
      setShouldShowTour(false);
    } finally {
      isCheckingRef.current = false;
    }
  };

  // Fun√ß√£o para limpar o tour (para quando o usu√°rio cria um grupo)
  const resetTourForNewGroups = () => {
    console.log('üîÑ [TOUR] Resetando tour - usu√°rio criou grupos');
    setIsOpen(false);
    setShouldShowTour(false);
    sessionStorage.removeItem(TOUR_SESSION_KEY);
    tourCheckedRef.current = false;
  };

  // Verificar condi√ß√µes quando a localiza√ß√£o mudar ou na inicializa√ß√£o
  useEffect(() => {
    if (!tourCheckedRef.current && location.pathname === '/') {
      console.log('üîÑ [TOUR] useEffect disparado - verificando condi√ß√µes do tour');
      tourCheckedRef.current = true;
      const timer = setTimeout(() => {
        checkTourConditions();
      }, 1000);

      return () => clearTimeout(timer);
    }
  }, [location.pathname]);

  // Escutar evento customizado de login
  useEffect(() => {
    const handleUserLoggedIn = (event: CustomEvent) => {
      console.log('üéâ [TOUR] Evento de login recebido:', event.detail);
      if (location.pathname === '/') {
        console.log('üìß [TOUR] Login detectado no dashboard, re-verificando condi√ß√µes do tour');
        tourCheckedRef.current = false;
        sessionStorage.removeItem(TOUR_SESSION_KEY);
        setTimeout(() => {
          checkTourConditions();
        }, 2500);
      }
    };

    window.addEventListener('userLoggedIn', handleUserLoggedIn as EventListener);
    return () => {
      window.removeEventListener('userLoggedIn', handleUserLoggedIn as EventListener);
    };
  }, [location.pathname]);

  const nextStep = () => {
    console.log('‚û°Ô∏è [TOUR] Pr√≥ximo step do tour:', currentStep + 1);
    if (currentStep < 2) {
      setCurrentStep(currentStep + 1);
    } else {
      closeTour();
    }
  };

  const skipTour = () => {
    console.log('‚è≠Ô∏è [TOUR] Pulando tour');
    closeTour();
  };

  const closeTour = () => {
    console.log('‚ùå [TOUR] Fechando tour');
    setIsOpen(false);
    setCurrentStep(0);
    setShouldShowTour(false);
    sessionStorage.setItem(TOUR_SESSION_KEY, 'true');
  };

  // Fun√ß√£o para for√ßar reabrir o tour (para testes)
  const reopenTour = () => {
    console.log('üîÑ [TOUR] Reabrindo tour manualmente');
    sessionStorage.removeItem(TOUR_SESSION_KEY);
    tourCheckedRef.current = false;
    setIsOpen(true);
    setCurrentStep(0);
  };

  return {
    isOpen,
    currentStep,
    shouldShowTour,
    nextStep,
    skipTour,
    closeTour,
    reopenTour,
    resetTourForNewGroups,
    setCurrentStep
  };
};
