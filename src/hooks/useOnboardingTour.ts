
import { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { listWhatsAppGroups } from '@/services/whatsAppGroupsService';

const TOUR_SESSION_KEY = 'onboarding_tour_shown';

export const useOnboardingTour = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [shouldShowTour, setShouldShowTour] = useState(false);
  const [tourShownThisSession, setTourShownThisSession] = useState(false);
  const location = useLocation();

  // Verificar se o tour deve ser exibido
  const checkTourConditions = async () => {
    try {
      console.log('üîç [TOUR] Iniciando verifica√ß√£o de condi√ß√µes do tour...');
      
      // S√≥ mostrar o tour na p√°gina inicial (dashboard)
      if (location.pathname !== '/') {
        console.log('‚ùå [TOUR] Tour s√≥ aparece no dashboard, p√°gina atual:', location.pathname);
        setShouldShowTour(false);
        return;
      }

      // Verificar se j√° foi mostrado nesta sess√£o
      const shownThisSession = sessionStorage.getItem(TOUR_SESSION_KEY) === 'true';
      
      console.log('üîç [TOUR] Verificando condi√ß√µes:', {
        shownThisSession,
        location: location.pathname,
        sessionStorage: sessionStorage.getItem(TOUR_SESSION_KEY)
      });

      if (shownThisSession) {
        console.log('‚ùå [TOUR] Tour j√° foi exibido nesta sess√£o');
        setShouldShowTour(false);
        setTourShownThisSession(true);
        return;
      }

      // Verificar se h√° grupos cadastrados
      let hasGroups = false;
      const userEmail = localStorage.getItem('userEmail');
      
      console.log('üìß [TOUR] Email do usu√°rio para verifica√ß√£o:', userEmail);
      
      if (!userEmail) {
        console.log('‚ùå [TOUR] Email n√£o encontrado no localStorage');
        setShouldShowTour(false);
        return;
      }

      try {
        console.log('üîç [TOUR] Buscando grupos para o usu√°rio...');
        const groups = await listWhatsAppGroups();
        hasGroups = groups.length > 0;
        console.log('üë• [TOUR] Grupos encontrados:', {
          quantidade: groups.length,
          grupos: groups.map(g => ({ id: g.id, nome: g.nome_grupo, status: g.status, login: g.login }))
        });
        console.log('üìä [TOUR] Query resultado completo:', groups);
      } catch (error) {
        console.log('‚ö†Ô∏è [TOUR] Erro ao verificar grupos, assumindo que n√£o h√° grupos:', error);
        hasGroups = false;
      }

      // Tour deve aparecer se N√ÉO tiver grupos
      const shouldShow = !hasGroups;
      
      console.log('üéØ [TOUR] Resultado final da verifica√ß√£o:', {
        hasGroups,
        shouldShow,
        currentPath: location.pathname,
        userEmail: userEmail,
        shownThisSession
      });

      setShouldShowTour(shouldShow);
      
      // Se deve mostrar o tour e n√£o foi mostrado ainda, abrir automaticamente
      if (shouldShow && !shownThisSession && !isOpen) {
        console.log('üöÄ [TOUR] Abrindo tour automaticamente - usu√°rio sem grupos');
        setTimeout(() => {
          console.log('üé¨ [TOUR] Executando abertura do tour...');
          setIsOpen(true);
          setCurrentStep(0);
          setTourShownThisSession(true);
          sessionStorage.setItem(TOUR_SESSION_KEY, 'true');
        }, 2000); // Delay para garantir que tudo carregue
      } else if (!shouldShow) {
        console.log('‚úÖ [TOUR] Usu√°rio j√° tem grupos, n√£o mostrar tour');
        setIsOpen(false);
      }
    } catch (error) {
      console.error('‚ùå [TOUR] Erro ao verificar condi√ß√µes do tour:', error);
      setShouldShowTour(false);
    }
  };

  // Verificar condi√ß√µes quando a localiza√ß√£o mudar ou na inicializa√ß√£o
  useEffect(() => {
    console.log('üîÑ [TOUR] useEffect disparado - verificando condi√ß√µes do tour');
    // Aguardar um pouco para garantir que os dados do usu√°rio est√£o dispon√≠veis
    const timer = setTimeout(() => {
      checkTourConditions();
    }, 1000);

    return () => clearTimeout(timer);
  }, [location.pathname]);

  // Escutar evento customizado de login
  useEffect(() => {
    const handleUserLoggedIn = (event: CustomEvent) => {
      console.log('üéâ [TOUR] Evento de login recebido:', event.detail);
      if (location.pathname === '/') {
        console.log('üìß [TOUR] Login detectado no dashboard, verificando condi√ß√µes do tour');
        setTimeout(() => {
          checkTourConditions();
        }, 2500);
      }
    };

    window.addEventListener('userLoggedIn', handleUserLoggedIn as EventListener);
    return () => {
      window.removeEventListener('userLoggedIn', handleUserLoggedIn as EventListener);
    };
  }, [location.pathname]);

  // Verificar tamb√©m quando o email do usu√°rio estiver dispon√≠vel
  useEffect(() => {
    const userEmail = localStorage.getItem('userEmail');
    console.log('üìß [TOUR] Segundo useEffect - email dispon√≠vel:', userEmail);
    if (userEmail && location.pathname === '/') {
      console.log('üìß [TOUR] Email detectado, re-verificando condi√ß√µes do tour');
      // Delay maior para garantir que o usu√°rio j√° est√° logado completamente
      setTimeout(() => {
        checkTourConditions();
      }, 1500);
    }
  }, []);

  // Escutar mudan√ßas no localStorage para detectar login
  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'userEmail' && e.newValue) {
        console.log('üë§ [TOUR] Login detectado via storage event:', e.newValue);
        if (location.pathname === '/') {
          setTimeout(() => {
            checkTourConditions();
          }, 2000);
        }
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [location.pathname]);

  // Limpar tour ao mudar de sess√£o
  useEffect(() => {
    const handleSessionStorageChange = () => {
      const shownThisSession = sessionStorage.getItem(TOUR_SESSION_KEY) === 'true';
      setTourShownThisSession(shownThisSession);
    };

    window.addEventListener('storage', handleSessionStorageChange);
    return () => window.removeEventListener('storage', handleSessionStorageChange);
  }, []);

  const nextStep = () => {
    console.log('‚û°Ô∏è [TOUR] Pr√≥ximo step do tour:', currentStep + 1);
    if (currentStep < 2) {
      setCurrentStep(currentStep + 1);
    } else {
      closeTour();
    }
  };

  const skipTour = () => {
    console.log('‚è≠Ô∏è [TOUR] Pulando tour');
    closeTour();
  };

  const closeTour = () => {
    console.log('‚ùå [TOUR] Fechando tour');
    setIsOpen(false);
    setCurrentStep(0);
    // Marcar como exibido nesta sess√£o
    sessionStorage.setItem(TOUR_SESSION_KEY, 'true');
    setTourShownThisSession(true);
  };

  // Fun√ß√£o para for√ßar reabrir o tour (para testes)
  const reopenTour = () => {
    console.log('üîÑ [TOUR] Reabrindo tour manualmente');
    sessionStorage.removeItem(TOUR_SESSION_KEY);
    setTourShownThisSession(false);
    setIsOpen(true);
    setCurrentStep(0);
  };

  return {
    isOpen,
    currentStep,
    shouldShowTour,
    nextStep,
    skipTour,
    closeTour,
    reopenTour,
    setCurrentStep
  };
};
