
import { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useWhatsAppInstances } from '@/hooks/useWhatsAppInstances';
import { listWhatsAppGroups } from '@/services/whatsAppGroupsService';

const TOUR_SESSION_KEY = 'onboarding_tour_shown';

export const useOnboardingTour = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [shouldShowTour, setShouldShowTour] = useState(false);
  const [tourShownThisSession, setTourShownThisSession] = useState(false);
  const location = useLocation();
  const { instances } = useWhatsAppInstances();

  // Verificar se o tour deve ser exibido
  const checkTourConditions = async () => {
    try {
      // Verificar se j√° foi mostrado nesta sess√£o
      const shownThisSession = sessionStorage.getItem(TOUR_SESSION_KEY) === 'true';
      
      console.log('üîç Verificando condi√ß√µes do tour:', {
        shownThisSession,
        instances: instances.length,
        location: location.pathname
      });

      if (shownThisSession) {
        console.log('‚ùå Tour j√° foi exibido nesta sess√£o');
        setShouldShowTour(false);
        setTourShownThisSession(true);
        return;
      }

      // Verificar se h√° inst√¢ncias conectadas
      const hasConnectedInstance = instances.some(instance => 
        instance.status === 'connected' || instance.connectionState === 'open'
      );

      console.log('üì± Status das inst√¢ncias:', {
        totalInstances: instances.length,
        hasConnectedInstance,
        instancesDetails: instances.map(i => ({ 
          name: i.instanceName, 
          status: i.status, 
          connectionState: i.connectionState 
        }))
      });

      // Verificar se h√° grupos cadastrados
      let hasGroups = false;
      try {
        const groups = await listWhatsAppGroups();
        hasGroups = groups.length > 0;
        console.log('üë• Grupos encontrados:', groups.length);
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao verificar grupos, assumindo que n√£o h√° grupos:', error);
        hasGroups = false;
      }

      // Tour deve aparecer se N√ÉO tiver inst√¢ncia conectada OU N√ÉO tiver grupos
      const shouldShow = !hasConnectedInstance || !hasGroups;
      
      console.log('üéØ Resultado da verifica√ß√£o:', {
        hasConnectedInstance,
        hasGroups,
        shouldShow,
        currentPath: location.pathname
      });

      setShouldShowTour(shouldShow);
      
      // Se deve mostrar o tour e n√£o foi mostrado ainda, abrir automaticamente
      if (shouldShow && !shownThisSession && !isOpen) {
        console.log('üöÄ Abrindo tour automaticamente');
        setIsOpen(true);
        setCurrentStep(0);
        setTourShownThisSession(true);
        sessionStorage.setItem(TOUR_SESSION_KEY, 'true');
      } else if (!shouldShow) {
        // Se as condi√ß√µes foram atendidas, fechar o tour
        console.log('‚úÖ Condi√ß√µes atendidas, fechando tour se estiver aberto');
        setIsOpen(false);
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar condi√ß√µes do tour:', error);
      setShouldShowTour(false);
    }
  };

  // Verificar condi√ß√µes quando inst√¢ncias mudarem ou na inicializa√ß√£o
  useEffect(() => {
    console.log('üîÑ Efeito disparado - verificando condi√ß√µes do tour');
    checkTourConditions();
  }, [instances, location.pathname]);

  // Limpar tour ao mudar de sess√£o
  useEffect(() => {
    const handleStorageChange = () => {
      const shownThisSession = sessionStorage.getItem(TOUR_SESSION_KEY) === 'true';
      setTourShownThisSession(shownThisSession);
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, []);

  const nextStep = () => {
    console.log('‚û°Ô∏è Pr√≥ximo step do tour:', currentStep + 1);
    if (currentStep < 2) {
      setCurrentStep(currentStep + 1);
    } else {
      closeTour();
    }
  };

  const skipTour = () => {
    console.log('‚è≠Ô∏è Pulando tour');
    closeTour();
  };

  const closeTour = () => {
    console.log('‚ùå Fechando tour');
    setIsOpen(false);
    setCurrentStep(0);
    // Marcar como exibido nesta sess√£o
    sessionStorage.setItem(TOUR_SESSION_KEY, 'true');
    setTourShownThisSession(true);
  };

  // Fun√ß√£o para for√ßar reabrir o tour (para testes)
  const reopenTour = () => {
    console.log('üîÑ Reabrindo tour manualmente');
    sessionStorage.removeItem(TOUR_SESSION_KEY);
    setTourShownThisSession(false);
    setIsOpen(true);
    setCurrentStep(0);
  };

  return {
    isOpen,
    currentStep,
    shouldShowTour,
    nextStep,
    skipTour,
    closeTour,
    reopenTour,
    setCurrentStep
  };
};
